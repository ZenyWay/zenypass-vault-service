(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * cuid.js
 * Collision-resistant UID generator for browsers and node.
 * Sequential for fast db lookups and recency sorting.
 * Safe for element IDs and server-side lookups.
 *
 * Extracted from CLCTR
 *
 * Copyright (c) Eric Elliott 2012
 * MIT License
 */

/*global window, navigator, document, require, process, module */
(function (app) {
  'use strict';
  var namespace = 'cuid',
    c = 0,
    blockSize = 4,
    base = 36,
    discreteValues = Math.pow(base, blockSize),

    pad = function pad(num, size) {
      var s = "000000000" + num;
      return s.substr(s.length-size);
    },

    randomBlock = function randomBlock() {
      return pad((Math.random() *
            discreteValues << 0)
            .toString(base), blockSize);
    },

    safeCounter = function () {
      c = (c < discreteValues) ? c : 0;
      c++; // this is not subliminal
      return c - 1;
    },

    api = function cuid() {
      // Starting with a lowercase letter makes
      // it HTML element ID friendly.
      var letter = 'c', // hard-coded allows for sequential access

        // timestamp
        // warning: this exposes the exact date and time
        // that the uid was created.
        timestamp = (new Date().getTime()).toString(base),

        // Prevent same-machine collisions.
        counter,

        // A few chars to generate distinct ids for different
        // clients (so different computers are far less
        // likely to generate the same id)
        fingerprint = api.fingerprint(),

        // Grab some more chars from Math.random()
        random = randomBlock() + randomBlock();

        counter = pad(safeCounter().toString(base), blockSize);

      return  (letter + timestamp + counter + fingerprint + random);
    };

  api.slug = function slug() {
    var date = new Date().getTime().toString(36),
      counter,
      print = api.fingerprint().slice(0,1) +
        api.fingerprint().slice(-1),
      random = randomBlock().slice(-2);

      counter = safeCounter().toString(36).slice(-4);

    return date.slice(-2) +
      counter + print + random;
  };

  api.globalCount = function globalCount() {
    // We want to cache the results of this
    var cache = (function calc() {
        var i,
          count = 0;

        for (i in window) {
          count++;
        }

        return count;
      }());

    api.globalCount = function () { return cache; };
    return cache;
  };

  api.fingerprint = function browserPrint() {
    return pad((navigator.mimeTypes.length +
      navigator.userAgent.length).toString(36) +
      api.globalCount().toString(36), 4);
  };

  // don't change anything from here down.
  if (app.register) {
    app.register(namespace, api);
  } else if (typeof module !== 'undefined') {
    module.exports = api;
  } else {
    app[namespace] = api;
  }

}(this.applitude || this));

},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
;
var src_1 = require("../../src");
var cbox_vault_1 = require("cbox-vault");
var opgp_service_1 = require("opgp-service");
var randombins_1 = require("randombins");
var PouchDB = require('pouchdb-browser');
var pbkdf2sha512_1 = require("pbkdf2sha512");
var rxjs_1 = require("rxjs");
var debug = require("debug");
debug.enable('zp-vault-example:*');
var opgp = opgp_service_1.default();
var pbkdf2 = pbkdf2sha512_1.default({ iterations: 8192 });
var passphrase = pbkdf2('secret passphrase');
var keyspec = passphrase.then(function (digest) { return ({
    passphrase: digest.value,
    size: 2048,
    unlocked: true
}); });
var key = opgp.generateKey('john.doe@example.com', keyspec);
var alphabet = '-abcdefghijklmnopqrstuvw_';
var getRandomBins = randombins_1.default({ size: 16 });
var bins = getRandomBins([alphabet, alphabet])
    .reduce(function (arr, bin) { return arr.concat(bin); }, []);
var idHash = pbkdf2sha512_1.default({ iterations: 8192 });
var db = new PouchDB('zenypass');
var cbox = cbox_vault_1.default(db, opgp, {
    cipher: key,
    auth: key
}, {
    hash: function (passphrase) { return idHash(passphrase).then(function (_a) {
        var value = _a.value;
        return value;
    }); },
    bins: bins,
    read: { include_docs: true }
});
function authorize(passphrase) {
    return keyspec.then(function (_a) {
        var passphrase = _a.passphrase;
        return pbkdf2(passphrase)
            .then(function (digest) { return digest.value === passphrase; });
    });
}
var vault = src_1.default(cbox, authorize);
rxjs_1.Observable.from([
    { url: 'https://zenyway.com' },
    { url: 'https://en.wikipedia.org/w/index.php?title=Special:UserLogin' }
])
    .map(function (obj) { return vault.newAccount(obj); })
    .do(debug('zp-vault-example:account:source:'))
    .let(vault.write)
    .forEach(debug('zp-vault-example:account:persisted:'))
    .then(debug('zp-vault-example:account:done:'))
    .catch(debug('zp-vault-example:account:error:'));

},{"../../src":4,"cbox-vault":undefined,"debug":undefined,"opgp-service":undefined,"pbkdf2sha512":undefined,"pouchdb-browser":undefined,"randombins":undefined,"rxjs":undefined}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
;
var rxjs_1 = require("rxjs");
var cuid = require('cuid');
var _AccountStreamOperators = (function () {
    function _AccountStreamOperators(newAccount, promises) {
        this.newAccount = newAccount;
        this.promises = promises;
    }
    _AccountStreamOperators.prototype.toAccount = function (doc$) {
        var _this = this;
        return doc$
            .map(function (doc) { return Array.isArray(doc)
            ? doc.map(_this.newAccount)
            : _this.newAccount(doc); })
            .share().observeOn(rxjs_1.Scheduler.asap);
    };
    _AccountStreamOperators.prototype.fromAccount = function (account$) {
        var _this = this;
        var uid = cuid();
        return account$
            .concatMap(function (account) { return Array.isArray(account)
            ? _this.fromAccount(rxjs_1.Observable.from(account)).toArray()
            : new Promise(function (resolve) {
                _this.promises[uid] = resolve;
                account.emit(uid);
            }); });
    };
    return _AccountStreamOperators;
}());
_AccountStreamOperators.getOperators = function (getAccountFactory) {
    var promises = {};
    function onEmit(doc, uid) {
        var resolve = promises[uid];
        setTimeout(function () { return resolve(doc); });
    }
    var newAccount = getAccountFactory(onEmit, { include_docref: true });
    var operators = new _AccountStreamOperators(newAccount, promises);
    return {
        newAccount: getAccountFactory(onEmit),
        toAccount: function (doc$) {
            return operators.toAccount(doc$);
        },
        fromAccount: function (account$) {
            return operators.fromAccount(account$);
        }
    };
};
var getOperators = _AccountStreamOperators.getOperators;
exports.default = getOperators;

},{"cuid":1,"rxjs":undefined}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
;
var account_stream_operators_1 = require("./account-stream-operators");
var zenypass_account_model_1 = require("zenypass-account-model");
var rxjs_1 = require("rxjs");
var tslib_1 = require("tslib");
var VAULT_SERVICE_SPEC_DEFAULTS = {
    getAccountFactory: zenypass_account_model_1.default
};
var _VaultService = (function () {
    function _VaultService(vault, newAccount, operators) {
        this.vault = vault;
        this.newAccount = newAccount;
        this.operators = operators;
    }
    _VaultService.prototype.write = function (accounts) {
        var doc$ = this.operators.fromAccount(rxjs_1.Observable.from(accounts));
        var account$ = this.operators.toAccount(this.vault.write(doc$));
        return account$;
    };
    _VaultService.prototype.read = function (refs, opts) {
        var doc$ = this.vault.read(refs);
        var account$ = this.operators.toAccount(doc$);
        return account$;
    };
    return _VaultService;
}());
_VaultService.getInstance = function (vault, authorize, opts) {
    var spec = tslib_1.__assign({}, VAULT_SERVICE_SPEC_DEFAULTS, opts);
    var getCustomAccountFactory = spec.getAccountFactory.bind(void 0, authorize);
    var operators = account_stream_operators_1.default(getCustomAccountFactory);
    var accountVault = new _VaultService(vault, operators.newAccount, operators);
    return {
        newAccount: accountVault.newAccount.bind(accountVault),
        write: accountVault.write.bind(accountVault),
        read: accountVault.read.bind(accountVault),
        unlock: function (keys) {
            return _VaultService.getInstance(vault.unlock(keys), authorize, opts);
        }
    };
};
var getVaultService = _VaultService.getInstance;
exports.default = getVaultService;

},{"./account-stream-operators":3,"rxjs":undefined,"tslib":undefined,"zenypass-account-model":undefined}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
